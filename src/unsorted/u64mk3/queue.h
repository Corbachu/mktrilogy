//////////////////////////////////////////////////////////////////////////////////////////
// queue.h
//
// Author: David Schwartz
//////////////////////////////////////////////////////////////////////////////////////////
// THIS CODE IS PROPRIETARY PROPERTY OF WILLIAMS ENTERTAINMENT.
//
// The contents of this file may not be disclosed to third
// parties, copied or duplicated in any form, in whole or in part,
// without the prior written permission of Williams Entertainment.
//////////////////////////////////////////////////////////////////////////////////////////

#ifndef QUEUE_H
#define QUEUE_H



//////////////////////////////////////////////////////////////////////////////////////////
// Public definitions:

struct qlink {
	struct qlink	*plink;		// points to previous queue (0=this entry is first)
	struct qlink	*nlink;		// points to next queue (0=this entry is last)
};

struct queue {
	struct qlink	*head;		// points to the head of the queue (0=queue is empty)
	struct qlink	*tail;		// points to the tail of the queue (0=queue is empty)
};


//////////////////////////////////////////////////////////////////////////////////////////
// Public functions:

//////////////////////////////////////////////////////////////////////////////////////////
// queue_add_head - adds to the front of the queue.
//
// If add is a null-pointer, queue_add_head simply returns a null-pointer. Interrupts
// are disabled through critical portions.
//////////////////////////////////////////////////////////////////////////////////////////
extern struct qlink *queue_add_head( struct queue *queue, struct qlink *add );


//////////////////////////////////////////////////////////////////////////////////////////
// queue_add_tail - adds to the end of the queue.
//
// If add is a null-pointer, queue_add_tail simply returns a null-pointer. Interrupts
// are disabled through critical portions.
//////////////////////////////////////////////////////////////////////////////////////////
extern struct qlink *queue_add_tail( struct queue *queue, struct qlink *add );


//////////////////////////////////////////////////////////////////////////////////////////
// queue_remove - removes the specified entry from the queue.
//
// Returns a pointer to the removed entry, or 0 if the queue was empty. Interrupts are
// disabled through critical portions.
//////////////////////////////////////////////////////////////////////////////////////////
extern struct qlink *queue_remove( struct queue *queue, struct qlink *remove );


//////////////////////////////////////////////////////////////////////////////////////////
// queue_remove_head - removes from the head of the queue.
//
// Returns a pointer to the removed entry, or 0 if the queue was empty. Interrupts are
// disabled through critical portions.
//////////////////////////////////////////////////////////////////////////////////////////
extern struct qlink *queue_remove_head( struct queue *queue );


//////////////////////////////////////////////////////////////////////////////////////////
// queue_remove_tail - removes from the tail of the queue.
//
// Returns a pointer to the removed entry, or 0 if the queue was empty. Interrupts are
// disabled through critical portions.
//////////////////////////////////////////////////////////////////////////////////////////
extern struct qlink *queue_remove_tail( struct queue *queue );


//////////////////////////////////////////////////////////////////////////////////////////
// queue_init - initializes a queue. Interrupts are disabled through critical portions.
//////////////////////////////////////////////////////////////////////////////////////////
extern void queue_init( struct queue *queue, void *first, int size, int num );



#endif
