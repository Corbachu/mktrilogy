//////////////////////////////////////////////////////////////////////////////////////////
// sound.h
//
// Author: David Schwartz
//////////////////////////////////////////////////////////////////////////////////////////
// THIS CODE IS PROPRIETARY PROPERTY OF WILLIAMS ENTERTAINMENT.
//
// The contents of this file may not be disclosed to third
// parties, copied or duplicated in any form, in whole or in part,
// without the prior written permission of Williams Entertainment.
//////////////////////////////////////////////////////////////////////////////////////////

#ifndef SOUND_H
#define SOUND_H 1

#include "mktril.h"


//========================================================================================
// Public definitions:

#define SOUND_FIRST_MUSIC_SEQ_NUM		(TUNE_VERSUS)
#define SOUND_NUM_MUSIC_SEQS			((NUMBER_OF_SEQUENCES) - SOUND_FIRST_MUSIC_SEQ_NUM)
#define SOUND_MUSIC_SEQ_BUFFER_SIZE		22000


//========================================================================================
// Public functions:
__EXTERN__ BYTE *sys_music_buf;

//////////////////////////////////////////////////////////////////////////////////////////
// sound_reset - resets the sound system. All sound is stopped.
//////////////////////////////////////////////////////////////////////////////////////////
extern void sound_reset( void );


//////////////////////////////////////////////////////////////////////////////////////////
// sound_player - plays a sound for the specified player. If Players is 0 then the
//                player parameter is ignored and both left and right channels are used
//                to play the sound. If Players is 1 then the player parameter determines
//                which channel to play the sound (0: left, 1:right).
//
//                If TwoPlayerSplitSounds is 0 or player is -1 then Players is ignored
//                and all sounds are played on both left and right channels.
//////////////////////////////////////////////////////////////////////////////////////////
extern void sound_player( int seq_num, int player );


//////////////////////////////////////////////////////////////////////////////////////////
// sound_player_vol - same as sound_player, but adds volume control (0.0=min, 1.0=max).
//////////////////////////////////////////////////////////////////////////////////////////
extern void sound_player_vol( int seq_num, int player, float vol );


//////////////////////////////////////////////////////////////////////////////////////////
// sound_status - returns the status of the specified sound. Status codes are the same
//                as wess_seq_status. Note that player may be -1 to indicate both channels.
//                See sound_player for more info.
//////////////////////////////////////////////////////////////////////////////////////////
extern int sound_status( int seq_num, int player );


//////////////////////////////////////////////////////////////////////////////////////////
// sound_stop_player - stops the specified sound. Use this to stop sounds started with
//                     sound_player. Note that player may be -1 to indicate both channels.
//                     See sound_player for more info.
//////////////////////////////////////////////////////////////////////////////////////////
extern void sound_stop_player( int seq_num, int player );


//////////////////////////////////////////////////////////////////////////////////////////
// sound_stop_all - stops the specified sound playing on all channels (left, right, or
//                  both.
//////////////////////////////////////////////////////////////////////////////////////////
extern void sound_stop_all( int seq_num );


//////////////////////////////////////////////////////////////////////////////////////////
// sound_music_work - called by VBI to handle synchronization of music sequences.
//////////////////////////////////////////////////////////////////////////////////////////
extern void sound_music_work( void );


//////////////////////////////////////////////////////////////////////////////////////////
// sound_music_start - starts a music sequence playing as soon as possible. If another
//                     sequence is currently playing, that sequence is stopped first.
//////////////////////////////////////////////////////////////////////////////////////////
extern void sound_music_start( int seq_num );


//////////////////////////////////////////////////////////////////////////////////////////
// sound_music_stop - stops the current music sequence from playing.
//////////////////////////////////////////////////////////////////////////////////////////
extern void sound_music_stop( void );


#endif

